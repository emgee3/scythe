#! /usr/bin/env node

var   _ = require('lodash'),
     fs = require('fs'),
     ms = require('ms'),
  async = require('async'),
 moment = require('moment'),
 colors = require('colors'),
 Scythe = require('../index');

colors.setTheme({
  file  : 'green',
  dir   : 'blue',
  data  : 'grey',
  error : 'red'
});

var opts = parseArgs();

if (! opts.threshold) {
  console.log('Error:'.error.bold + ' Must specify threshold'.error);
  parseArgs(['-h']);
}

var threshold = moment(new Date - ms(opts.threshold));
if (threshold.isValid()) {
  opts.threshold = threshold.toDate();
} else {
  console.log('Error:'.error.bold + ' Threshold unparsable.'.error);
  parseArgs(['-h']);
}

opts._ = _.uniq(opts._);
if (opts._.length === 0) opts._ = ['.'];
opts.searchPaths = opts._;


async.every(opts.searchPaths, isValidDirectory, function (res) {
  if (res) {
    var scythe = new Scythe(opts);

    if (scythe.verbose) {

      var mode = scythe.simulation ? "simulation" : "active";
      console.log("\nScythe".bold + " running in ".data + mode.data.bold + " mode".data);
      var paths = scythe.searchPaths.join(", ");
      console.log('Searching '.data + paths.data.bold);
      var threshold = moment(scythe.threshold).toString();
      console.log('Removing files older than '.data + threshold.data.bold);
      console.log('-----------------------------------------------------------\n'.data);

      scythe.on('preserveFile', function (f) {
        console.log('File Preserved '.file, f.data);
      });
      scythe.on('preserveDir', function (d) {
        console.log('Dir  Preserved '.dir, d.data)
      });
      scythe.on('unlinkFile', function (f) {
        console.log('File Unlinked '.dir, f.data)
      });
      scythe.on('unlinkDir', function (d) {
        console.log('Dir  Unlinked '.dir, d.data)
      });
      scythe.on('error', function (e) {
        console.log('Error: '.error.bold, e);
      });
    }

    scythe.execute(function () {
      console.log('\n' + 'scythe'.bold + ' complete');
    });

  }
});


function parseArgs (argv) {
  if (! argv) {
    argv = process.argv;
    argv.shift();
    argv.shift();
  }

  return require("nomnom")
    .script('scythe')
    .option('force', {
      abbr: 'f',
      flag: true,
      help: 'force file deletion'
    })
    .option('threshold', { 
      abbr: 't',
      help: 'file age threshold for deletion. Age such as 100, 5s, 10m, 6h, 3d are parsed'
    })
    .option('verbose', { 
      abbr: 'v',
      flag : true
    })
    .parse(argv);
}


function isValidDirectory (dir, cb) {
  var stat;
  try {
    stat = fs.statSync(dir);
  } catch (e) {
    if (e.errno === 34) {
      console.error("Error: no such file or directory ".error + dir.error.bold);
    } else {
      console.error("Error: invalid directory ".error + dir.error.bold);
    }
    return cb(false);
  }

  if (stat.isDirectory()) {
    return cb(true);
  } else {
    console.error("Error: ".error + dir.error.bold + " is not a directory.".error);
    return cb(false);
  }
}